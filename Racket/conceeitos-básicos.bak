#lang racket
;; expressões booleanas sempre tornam #t para true e #f para false.
(define x 1) ;; define x como 1.
(equal? 1 x) ;; verifica se x e 1 são iguais.
(equal? x (- 100 99)) ;; mesma coisa.

;; simbolos são uma unica palavra seguida depois do " ' " ex: 'funcao
(symbol? 'funcao) ;; verifica se 'funcao são simbolos. Abaixo verifica a igualdade dos simbolos.
(symbol=? 'funcao 'função)

;; a função (expt x y) significa expoente. Nesse caso x^y.
(expt 10 2)
(expt 53 53)
;; número complexos ;; sqrt é raiz quadrada
(sqrt -1)
(* 0+1i 0+1i) ;; exemplo do contrário da raiz.
;; racionais fracionados.
(/ 4 6) ;; dividindo esses dois inteiros resultando em 2/3, para valores decimais so usar (/ 4.0 6.0).
;; strings in racket tem o seguinte formato "xxxxx".  Existe funções para strings. (string-append soma
;; strings
;; (substring que irá selecionar a parte que vc quer na string.
;; (string-ref vai pegar a string o char que vc especificar da string
;; (string=? vai chegar se as string são iguais. (string? deve chegar se são strings.
(define minhaString "Jack O Gordo");; define string
(string? minhaString) ;; retorna #t
(string=? minhaString minhaString) ;; retorna #t
(string-ref minhaString 5) ;; printa um \ antes do char.
(substring minhaString 5 10) ; retorna do 6 ao 9 ( o ultimo n entra, porque a contagem começa do 0 igual vertor em c.
;; lista em racket funciona da seguinte forma. (list x y z) ou, na vertical seria 'x y z.
(list 2 3 4);; forma simplificada, mas oque acontece a fundo é cada termo chamando outro.
(cons 2(cons 3(cons 4 empty))) ;; Na verdade, cada (cons chama o outro e mostra o valor até chegar no vazio.
(cons 4 6) ;; criando uma (cons x y) você pode manipular oque é mostrado. ;; Essa função mostra a lista separado por "."
(car (cons 4 6)) ;; (car vai te dar o dado mais a esquerda.
(cdr (cons 4 6)) ;; (cdr vai te dar o dado mais a direita.
;; cons pode ser usado para linkar coisa a listas.
'chicken ;; simbolo
(cons 'chicken '()) ;; ou empty ou (list)
;; '(), empty e (list) são listas vazias. Logo o simbolo 'chicken ficou dentro da lista vazia.
(cons 'pork '(beef chicken)) ;;  nesse exemplo esta sendo 'conse' o pork esta sendo adicionado a outra lista ja criada.
;; tudo em (cons seria assim:
(cons 'pork(cons 'beef(cons 'chicken empty)))
;; (first pega o primeiro item da lista, enquanto (rest pega os demais depois do primeiro.
(first (cons 'pork(cons 'beef(cons 'chicken '()))))
(rest '(pork beef chicken))
;; Assim, podemos ser mais específicos e pegar o primeiro termo dos demais termos depois do primeiro.
(first (rest (cons 'pork(cons 'beef(cons 'chicken '())))))
;; Além disso, é possível manipular do primeiro ao décimo item da lista com funções prontas do racket.
;; first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth.
(tenth (list 'porco 'boi 'frango 'gato 'cachorro 'passaro 'lagarto 'peixe 'caprino 'coelho))
