#lang racket
(require 2htdp/universe 2htdp/image)

(define HEIGHT 150)
(define SIZE 50)
(define TEXT-SIZE 15)
(struct intervalo (menor maior))
(define TEXT-X 3)
(define TEXT-UPPER-Y 10)
(define TEXT-LOWER-Y 135)
(define HELP-TEXT
  (text "↑ Para números maiores, ↓ para números menores"
        TEXT-SIZE
        "blue"))
(define HELP-TEXT2
  (text "Pressione = quando o programa acertar o número ou q para quitar."
        TEXT-SIZE
        "blue"))
(define color "red")
(define WIDTH (+ (image-width HELP-TEXT2) 10))

(define FUNDO
  (place-image/align ;; colocar a alinhar imagem.
   HELP-TEXT TEXT-X TEXT-UPPER-Y "left" "top"
   (place-image/align
    HELP-TEXT2 TEXT-X TEXT-LOWER-Y "left" "bottom"
    (empty-scene WIDTH HEIGHT))))

;; a main
(define (start lower upper)
  (big-bang (intervalo lower upper)
    (on-key lidarComAdivinhar)
    (to-draw renderizado)
    (stop-when single? )))
(define (renderizar-ultima-cena w)
  (overlay (text "FIM DE JOGO"
        SIZE
        "orange") FUNDO))

(define (lidarComAdivinhar w key)
  (cond [(key=? key "up") (bigger w)]
        [(key=? key "down") (smaller w)]
        [(key=? key "q") (stop-with w)]
        [(key=? key "=") (stop-with w)]
        [else w]))

(define (smaller w)
  (intervalo (intervalo-menor w)
            (max (intervalo-menor w) (sub1 (adivinhar w)))))

(define (bigger w)
  (intervalo (min (intervalo-maior w) (add1 (adivinhar w)))
            (intervalo-maior w)))

(define (adivinhar w)
  (quotient (+ (intervalo-menor w) (intervalo-maior w)) 2))

(define (renderizado w)
  (overlay (text (number->string (adivinhar w)) SIZE "red") FUNDO))

;;(define (stop-with w)
;;  (overlay (renderizar-ultima-cena w) FUNDO))

(define (single? w)
  (= (intervalo-menor w) (intervalo-maior w)))



